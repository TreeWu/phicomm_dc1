// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/v1/share.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetShareListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShareListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareListReqMultiError, or nil if none found.
func (m *GetShareListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShareListReqMultiError(errors)
	}

	return nil
}

// GetShareListReqMultiError is an error wrapping multiple validation errors
// returned by GetShareListReq.ValidateAll() if the designated constraints
// aren't met.
type GetShareListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareListReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareListReqMultiError) AllErrors() []error { return m }

// GetShareListReqValidationError is the validation error returned by
// GetShareListReq.Validate if the designated constraints aren't met.
type GetShareListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareListReqValidationError) ErrorName() string { return "GetShareListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetShareListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareListReqValidationError{}

// Validate checks the field values on GetShareListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShareListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareListReplyMultiError, or nil if none found.
func (m *GetShareListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOwnerShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShareListReplyValidationError{
						field:  fmt.Sprintf("OwnerShares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShareListReplyValidationError{
						field:  fmt.Sprintf("OwnerShares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShareListReplyValidationError{
					field:  fmt.Sprintf("OwnerShares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFromOtherShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShareListReplyValidationError{
						field:  fmt.Sprintf("FromOtherShares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShareListReplyValidationError{
						field:  fmt.Sprintf("FromOtherShares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShareListReplyValidationError{
					field:  fmt.Sprintf("FromOtherShares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetShareListReplyMultiError(errors)
	}

	return nil
}

// GetShareListReplyMultiError is an error wrapping multiple validation errors
// returned by GetShareListReply.ValidateAll() if the designated constraints
// aren't met.
type GetShareListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareListReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareListReplyMultiError) AllErrors() []error { return m }

// GetShareListReplyValidationError is the validation error returned by
// GetShareListReply.Validate if the designated constraints aren't met.
type GetShareListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareListReplyValidationError) ErrorName() string {
	return "GetShareListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetShareListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareListReplyValidationError{}

// Validate checks the field values on ShareInviteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareInviteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareInviteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareInviteReqMultiError,
// or nil if none found.
func (m *ShareInviteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareInviteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserCode()) < 1 {
		err := ShareInviteReqValidationError{
			field:  "UserCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeviceId()) < 1 {
		err := ShareInviteReqValidationError{
			field:  "DeviceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShareInviteReqMultiError(errors)
	}

	return nil
}

// ShareInviteReqMultiError is an error wrapping multiple validation errors
// returned by ShareInviteReq.ValidateAll() if the designated constraints
// aren't met.
type ShareInviteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareInviteReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareInviteReqMultiError) AllErrors() []error { return m }

// ShareInviteReqValidationError is the validation error returned by
// ShareInviteReq.Validate if the designated constraints aren't met.
type ShareInviteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareInviteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareInviteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareInviteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareInviteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareInviteReqValidationError) ErrorName() string { return "ShareInviteReqValidationError" }

// Error satisfies the builtin error interface
func (e ShareInviteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareInviteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareInviteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareInviteReqValidationError{}

// Validate checks the field values on ShareInviteReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShareInviteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareInviteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareInviteReplyMultiError, or nil if none found.
func (m *ShareInviteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareInviteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareInviteReplyMultiError(errors)
	}

	return nil
}

// ShareInviteReplyMultiError is an error wrapping multiple validation errors
// returned by ShareInviteReply.ValidateAll() if the designated constraints
// aren't met.
type ShareInviteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareInviteReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareInviteReplyMultiError) AllErrors() []error { return m }

// ShareInviteReplyValidationError is the validation error returned by
// ShareInviteReply.Validate if the designated constraints aren't met.
type ShareInviteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareInviteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareInviteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareInviteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareInviteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareInviteReplyValidationError) ErrorName() string { return "ShareInviteReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShareInviteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareInviteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareInviteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareInviteReplyValidationError{}

// Validate checks the field values on ShareConfirmReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShareConfirmReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareConfirmReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareConfirmReqMultiError, or nil if none found.
func (m *ShareConfirmReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareConfirmReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetShareId() <= 0 {
		err := ShareConfirmReqValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Confirm

	if len(errors) > 0 {
		return ShareConfirmReqMultiError(errors)
	}

	return nil
}

// ShareConfirmReqMultiError is an error wrapping multiple validation errors
// returned by ShareConfirmReq.ValidateAll() if the designated constraints
// aren't met.
type ShareConfirmReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareConfirmReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareConfirmReqMultiError) AllErrors() []error { return m }

// ShareConfirmReqValidationError is the validation error returned by
// ShareConfirmReq.Validate if the designated constraints aren't met.
type ShareConfirmReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareConfirmReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareConfirmReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareConfirmReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareConfirmReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareConfirmReqValidationError) ErrorName() string { return "ShareConfirmReqValidationError" }

// Error satisfies the builtin error interface
func (e ShareConfirmReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareConfirmReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareConfirmReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareConfirmReqValidationError{}

// Validate checks the field values on ShareConfirmReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShareConfirmReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareConfirmReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareConfirmReplyMultiError, or nil if none found.
func (m *ShareConfirmReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareConfirmReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareConfirmReplyMultiError(errors)
	}

	return nil
}

// ShareConfirmReplyMultiError is an error wrapping multiple validation errors
// returned by ShareConfirmReply.ValidateAll() if the designated constraints
// aren't met.
type ShareConfirmReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareConfirmReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareConfirmReplyMultiError) AllErrors() []error { return m }

// ShareConfirmReplyValidationError is the validation error returned by
// ShareConfirmReply.Validate if the designated constraints aren't met.
type ShareConfirmReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareConfirmReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareConfirmReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareConfirmReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareConfirmReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareConfirmReplyValidationError) ErrorName() string {
	return "ShareConfirmReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ShareConfirmReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareConfirmReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareConfirmReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareConfirmReplyValidationError{}

// Validate checks the field values on ShareRevokeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareRevokeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareRevokeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareRevokeReqMultiError,
// or nil if none found.
func (m *ShareRevokeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareRevokeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetShareId() <= 0 {
		err := ShareRevokeReqValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShareRevokeReqMultiError(errors)
	}

	return nil
}

// ShareRevokeReqMultiError is an error wrapping multiple validation errors
// returned by ShareRevokeReq.ValidateAll() if the designated constraints
// aren't met.
type ShareRevokeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareRevokeReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareRevokeReqMultiError) AllErrors() []error { return m }

// ShareRevokeReqValidationError is the validation error returned by
// ShareRevokeReq.Validate if the designated constraints aren't met.
type ShareRevokeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareRevokeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareRevokeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareRevokeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareRevokeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareRevokeReqValidationError) ErrorName() string { return "ShareRevokeReqValidationError" }

// Error satisfies the builtin error interface
func (e ShareRevokeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareRevokeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareRevokeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareRevokeReqValidationError{}

// Validate checks the field values on ShareRevokeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShareRevokeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareRevokeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareRevokeReplyMultiError, or nil if none found.
func (m *ShareRevokeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareRevokeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareRevokeReplyMultiError(errors)
	}

	return nil
}

// ShareRevokeReplyMultiError is an error wrapping multiple validation errors
// returned by ShareRevokeReply.ValidateAll() if the designated constraints
// aren't met.
type ShareRevokeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareRevokeReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareRevokeReplyMultiError) AllErrors() []error { return m }

// ShareRevokeReplyValidationError is the validation error returned by
// ShareRevokeReply.Validate if the designated constraints aren't met.
type ShareRevokeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareRevokeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareRevokeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareRevokeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareRevokeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareRevokeReplyValidationError) ErrorName() string { return "ShareRevokeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShareRevokeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareRevokeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareRevokeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareRevokeReplyValidationError{}

// Validate checks the field values on ShareExitReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareExitReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareExitReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareExitReqMultiError, or
// nil if none found.
func (m *ShareExitReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareExitReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetShareId() <= 0 {
		err := ShareExitReqValidationError{
			field:  "ShareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShareExitReqMultiError(errors)
	}

	return nil
}

// ShareExitReqMultiError is an error wrapping multiple validation errors
// returned by ShareExitReq.ValidateAll() if the designated constraints aren't met.
type ShareExitReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareExitReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareExitReqMultiError) AllErrors() []error { return m }

// ShareExitReqValidationError is the validation error returned by
// ShareExitReq.Validate if the designated constraints aren't met.
type ShareExitReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareExitReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareExitReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareExitReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareExitReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareExitReqValidationError) ErrorName() string { return "ShareExitReqValidationError" }

// Error satisfies the builtin error interface
func (e ShareExitReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareExitReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareExitReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareExitReqValidationError{}

// Validate checks the field values on ShareExitReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareExitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareExitReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareExitReplyMultiError,
// or nil if none found.
func (m *ShareExitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareExitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareExitReplyMultiError(errors)
	}

	return nil
}

// ShareExitReplyMultiError is an error wrapping multiple validation errors
// returned by ShareExitReply.ValidateAll() if the designated constraints
// aren't met.
type ShareExitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareExitReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareExitReplyMultiError) AllErrors() []error { return m }

// ShareExitReplyValidationError is the validation error returned by
// ShareExitReply.Validate if the designated constraints aren't met.
type ShareExitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareExitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareExitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareExitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareExitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareExitReplyValidationError) ErrorName() string { return "ShareExitReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShareExitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareExitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareExitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareExitReplyValidationError{}

// Validate checks the field values on GetShareListReply_ShareInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShareListReply_ShareInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareListReply_ShareInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareListReply_ShareInfoMultiError, or nil if none found.
func (m *GetShareListReply_ShareInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareListReply_ShareInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserCode

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	// no validation rules for UserName

	// no validation rules for ShareStatus

	if len(errors) > 0 {
		return GetShareListReply_ShareInfoMultiError(errors)
	}

	return nil
}

// GetShareListReply_ShareInfoMultiError is an error wrapping multiple
// validation errors returned by GetShareListReply_ShareInfo.ValidateAll() if
// the designated constraints aren't met.
type GetShareListReply_ShareInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareListReply_ShareInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareListReply_ShareInfoMultiError) AllErrors() []error { return m }

// GetShareListReply_ShareInfoValidationError is the validation error returned
// by GetShareListReply_ShareInfo.Validate if the designated constraints
// aren't met.
type GetShareListReply_ShareInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareListReply_ShareInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareListReply_ShareInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareListReply_ShareInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareListReply_ShareInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareListReply_ShareInfoValidationError) ErrorName() string {
	return "GetShareListReply_ShareInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetShareListReply_ShareInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareListReply_ShareInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareListReply_ShareInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareListReply_ShareInfoValidationError{}
