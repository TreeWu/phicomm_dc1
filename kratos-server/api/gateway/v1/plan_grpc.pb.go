// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/gateway/v1/plan.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Plan_CreatePlan_FullMethodName = "/api.gateway.v1.Plan/CreatePlan"
	Plan_UpdatePlan_FullMethodName = "/api.gateway.v1.Plan/UpdatePlan"
	Plan_DeletePlan_FullMethodName = "/api.gateway.v1.Plan/DeletePlan"
	Plan_GetPlan_FullMethodName    = "/api.gateway.v1.Plan/GetPlan"
	Plan_ListPlan_FullMethodName   = "/api.gateway.v1.Plan/ListPlan"
	Plan_SwitchPlan_FullMethodName = "/api.gateway.v1.Plan/SwitchPlan"
	Plan_ExecPlan_FullMethodName   = "/api.gateway.v1.Plan/ExecPlan"
)

// PlanClient is the client API for Plan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanClient interface {
	// 创建计划
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanReply, error)
	// 更新计划
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanReply, error)
	// 删除计划
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanReply, error)
	// 获取计划
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanReply, error)
	// 获取计划列表
	ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanReply, error)
	// 切换计划开关
	SwitchPlan(ctx context.Context, in *SwitchPlanRequest, opts ...grpc.CallOption) (*SwitchPlanReply, error)
	ExecPlan(ctx context.Context, in *ExecPlanRequest, opts ...grpc.CallOption) (*ExecPlanReply, error)
}

type planClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanClient(cc grpc.ClientConnInterface) PlanClient {
	return &planClient{cc}
}

func (c *planClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanReply, error) {
	out := new(CreatePlanReply)
	err := c.cc.Invoke(ctx, Plan_CreatePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanReply, error) {
	out := new(UpdatePlanReply)
	err := c.cc.Invoke(ctx, Plan_UpdatePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanReply, error) {
	out := new(DeletePlanReply)
	err := c.cc.Invoke(ctx, Plan_DeletePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanReply, error) {
	out := new(GetPlanReply)
	err := c.cc.Invoke(ctx, Plan_GetPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) ListPlan(ctx context.Context, in *ListPlanRequest, opts ...grpc.CallOption) (*ListPlanReply, error) {
	out := new(ListPlanReply)
	err := c.cc.Invoke(ctx, Plan_ListPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) SwitchPlan(ctx context.Context, in *SwitchPlanRequest, opts ...grpc.CallOption) (*SwitchPlanReply, error) {
	out := new(SwitchPlanReply)
	err := c.cc.Invoke(ctx, Plan_SwitchPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) ExecPlan(ctx context.Context, in *ExecPlanRequest, opts ...grpc.CallOption) (*ExecPlanReply, error) {
	out := new(ExecPlanReply)
	err := c.cc.Invoke(ctx, Plan_ExecPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServer is the server API for Plan service.
// All implementations must embed UnimplementedPlanServer
// for forward compatibility
type PlanServer interface {
	// 创建计划
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanReply, error)
	// 更新计划
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanReply, error)
	// 删除计划
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanReply, error)
	// 获取计划
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanReply, error)
	// 获取计划列表
	ListPlan(context.Context, *ListPlanRequest) (*ListPlanReply, error)
	// 切换计划开关
	SwitchPlan(context.Context, *SwitchPlanRequest) (*SwitchPlanReply, error)
	ExecPlan(context.Context, *ExecPlanRequest) (*ExecPlanReply, error)
	mustEmbedUnimplementedPlanServer()
}

// UnimplementedPlanServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServer struct {
}

func (UnimplementedPlanServer) CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedPlanServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedPlanServer) DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedPlanServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlanServer) ListPlan(context.Context, *ListPlanRequest) (*ListPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlan not implemented")
}
func (UnimplementedPlanServer) SwitchPlan(context.Context, *SwitchPlanRequest) (*SwitchPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchPlan not implemented")
}
func (UnimplementedPlanServer) ExecPlan(context.Context, *ExecPlanRequest) (*ExecPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecPlan not implemented")
}
func (UnimplementedPlanServer) mustEmbedUnimplementedPlanServer() {}

// UnsafePlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServer will
// result in compilation errors.
type UnsafePlanServer interface {
	mustEmbedUnimplementedPlanServer()
}

func RegisterPlanServer(s grpc.ServiceRegistrar, srv PlanServer) {
	s.RegisterService(&Plan_ServiceDesc, srv)
}

func _Plan_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_DeletePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_ListPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).ListPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_ListPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).ListPlan(ctx, req.(*ListPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_SwitchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).SwitchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_SwitchPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).SwitchPlan(ctx, req.(*SwitchPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_ExecPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).ExecPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plan_ExecPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).ExecPlan(ctx, req.(*ExecPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plan_ServiceDesc is the grpc.ServiceDesc for Plan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Plan",
	HandlerType: (*PlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _Plan_CreatePlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _Plan_UpdatePlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _Plan_DeletePlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _Plan_GetPlan_Handler,
		},
		{
			MethodName: "ListPlan",
			Handler:    _Plan_ListPlan_Handler,
		},
		{
			MethodName: "SwitchPlan",
			Handler:    _Plan_SwitchPlan_Handler,
		},
		{
			MethodName: "ExecPlan",
			Handler:    _Plan_ExecPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/v1/plan.proto",
}
