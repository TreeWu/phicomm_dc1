// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.9
// source: api/gateway/v1/wechat.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWechatCheckHost = "/api.gateway.v1.Wechat/CheckHost"
const OperationWechatJsCode2Session = "/api.gateway.v1.Wechat/JsCode2Session"
const OperationWechatSystemInfo = "/api.gateway.v1.Wechat/SystemInfo"
const OperationWechatUpdateUser = "/api.gateway.v1.Wechat/UpdateUser"
const OperationWechatUserInfo = "/api.gateway.v1.Wechat/UserInfo"

type WechatHTTPServer interface {
	CheckHost(context.Context, *CheckHostReq) (*CheckHostReq, error)
	JsCode2Session(context.Context, *JsCode2SessionReq) (*JsCode2SessionReply, error)
	SystemInfo(context.Context, *SystemInfoReq) (*SystemInfoResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	UserInfo(context.Context, *UserInfoReq) (*UserInfoReply, error)
}

func RegisterWechatHTTPServer(s *http.Server, srv WechatHTTPServer) {
	r := s.Route("/")
	r.GET("v1/wechat/system_info", _Wechat_SystemInfo0_HTTP_Handler(srv))
	r.GET("v1/wechat/miniapp/jscode2session", _Wechat_JsCode2Session0_HTTP_Handler(srv))
	r.POST("v1/wechat/miniapp/update_user", _Wechat_UpdateUser0_HTTP_Handler(srv))
	r.GET("v1/wechat/miniapp/user_info", _Wechat_UserInfo0_HTTP_Handler(srv))
	r.GET("v1/check_host", _Wechat_CheckHost0_HTTP_Handler(srv))
}

func _Wechat_SystemInfo0_HTTP_Handler(srv WechatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SystemInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWechatSystemInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SystemInfo(ctx, req.(*SystemInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SystemInfoResp)
		return ctx.Result(200, reply)
	}
}

func _Wechat_JsCode2Session0_HTTP_Handler(srv WechatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JsCode2SessionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWechatJsCode2Session)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JsCode2Session(ctx, req.(*JsCode2SessionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JsCode2SessionReply)
		return ctx.Result(200, reply)
	}
}

func _Wechat_UpdateUser0_HTTP_Handler(srv WechatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWechatUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Wechat_UserInfo0_HTTP_Handler(srv WechatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWechatUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfo(ctx, req.(*UserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Wechat_CheckHost0_HTTP_Handler(srv WechatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckHostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWechatCheckHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckHost(ctx, req.(*CheckHostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckHostReq)
		return ctx.Result(200, reply)
	}
}

type WechatHTTPClient interface {
	CheckHost(ctx context.Context, req *CheckHostReq, opts ...http.CallOption) (rsp *CheckHostReq, err error)
	JsCode2Session(ctx context.Context, req *JsCode2SessionReq, opts ...http.CallOption) (rsp *JsCode2SessionReply, err error)
	SystemInfo(ctx context.Context, req *SystemInfoReq, opts ...http.CallOption) (rsp *SystemInfoResp, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
	UserInfo(ctx context.Context, req *UserInfoReq, opts ...http.CallOption) (rsp *UserInfoReply, err error)
}

type WechatHTTPClientImpl struct {
	cc *http.Client
}

func NewWechatHTTPClient(client *http.Client) WechatHTTPClient {
	return &WechatHTTPClientImpl{client}
}

func (c *WechatHTTPClientImpl) CheckHost(ctx context.Context, in *CheckHostReq, opts ...http.CallOption) (*CheckHostReq, error) {
	var out CheckHostReq
	pattern := "v1/check_host"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWechatCheckHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatHTTPClientImpl) JsCode2Session(ctx context.Context, in *JsCode2SessionReq, opts ...http.CallOption) (*JsCode2SessionReply, error) {
	var out JsCode2SessionReply
	pattern := "v1/wechat/miniapp/jscode2session"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWechatJsCode2Session))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatHTTPClientImpl) SystemInfo(ctx context.Context, in *SystemInfoReq, opts ...http.CallOption) (*SystemInfoResp, error) {
	var out SystemInfoResp
	pattern := "v1/wechat/system_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWechatSystemInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "v1/wechat/miniapp/update_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWechatUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatHTTPClientImpl) UserInfo(ctx context.Context, in *UserInfoReq, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "v1/wechat/miniapp/user_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWechatUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
