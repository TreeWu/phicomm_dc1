// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/v1/command.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Command) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommandMultiError, or nil if none found.
func (m *Command) ValidateAll() error {
	return m.validate(true)
}

func (m *Command) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceType

	// no validation rules for DeviceId

	// no validation rules for CommandId

	if all {
		switch v := interface{}(m.GetDc1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandValidationError{
					field:  "Dc1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandValidationError{
					field:  "Dc1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDc1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandValidationError{
				field:  "Dc1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandMultiError(errors)
	}

	return nil
}

// CommandMultiError is an error wrapping multiple validation errors returned
// by Command.ValidateAll() if the designated constraints aren't met.
type CommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandMultiError) AllErrors() []error { return m }

// CommandValidationError is the validation error returned by Command.Validate
// if the designated constraints aren't met.
type CommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandValidationError) ErrorName() string { return "CommandValidationError" }

// Error satisfies the builtin error interface
func (e CommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandValidationError{}

// Validate checks the field values on Dc1Command with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dc1Command) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dc1Command with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Dc1CommandMultiError, or
// nil if none found.
func (m *Dc1Command) ValidateAll() error {
	return m.validate(true)
}

func (m *Dc1Command) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.SwitchMain != nil {

		if _, ok := _Dc1Command_SwitchMain_InLookup[m.GetSwitchMain()]; !ok {
			err := Dc1CommandValidationError{
				field:  "SwitchMain",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Switch_1 != nil {

		if _, ok := _Dc1Command_Switch_1_InLookup[m.GetSwitch_1()]; !ok {
			err := Dc1CommandValidationError{
				field:  "Switch_1",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Switch_2 != nil {

		if _, ok := _Dc1Command_Switch_2_InLookup[m.GetSwitch_2()]; !ok {
			err := Dc1CommandValidationError{
				field:  "Switch_2",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Switch_3 != nil {

		if _, ok := _Dc1Command_Switch_3_InLookup[m.GetSwitch_3()]; !ok {
			err := Dc1CommandValidationError{
				field:  "Switch_3",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Dc1CommandMultiError(errors)
	}

	return nil
}

// Dc1CommandMultiError is an error wrapping multiple validation errors
// returned by Dc1Command.ValidateAll() if the designated constraints aren't met.
type Dc1CommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Dc1CommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Dc1CommandMultiError) AllErrors() []error { return m }

// Dc1CommandValidationError is the validation error returned by
// Dc1Command.Validate if the designated constraints aren't met.
type Dc1CommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dc1CommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dc1CommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dc1CommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dc1CommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dc1CommandValidationError) ErrorName() string { return "Dc1CommandValidationError" }

// Error satisfies the builtin error interface
func (e Dc1CommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDc1Command.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dc1CommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dc1CommandValidationError{}

var _Dc1Command_SwitchMain_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

var _Dc1Command_Switch_1_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

var _Dc1Command_Switch_2_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

var _Dc1Command_Switch_3_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on CommandReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommandReplyMultiError, or
// nil if none found.
func (m *CommandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceType

	// no validation rules for DeviceId

	// no validation rules for CommandId

	// no validation rules for Success

	// no validation rules for Reason

	if len(errors) > 0 {
		return CommandReplyMultiError(errors)
	}

	return nil
}

// CommandReplyMultiError is an error wrapping multiple validation errors
// returned by CommandReply.ValidateAll() if the designated constraints aren't met.
type CommandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandReplyMultiError) AllErrors() []error { return m }

// CommandReplyValidationError is the validation error returned by
// CommandReply.Validate if the designated constraints aren't met.
type CommandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandReplyValidationError) ErrorName() string { return "CommandReplyValidationError" }

// Error satisfies the builtin error interface
func (e CommandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandReplyValidationError{}
