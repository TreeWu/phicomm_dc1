// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/gateway/v1/wechat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wechat_SystemInfo_FullMethodName     = "/api.gateway.v1.Wechat/SystemInfo"
	Wechat_JsCode2Session_FullMethodName = "/api.gateway.v1.Wechat/JsCode2Session"
	Wechat_UpdateUser_FullMethodName     = "/api.gateway.v1.Wechat/UpdateUser"
	Wechat_UserInfo_FullMethodName       = "/api.gateway.v1.Wechat/UserInfo"
	Wechat_CheckHost_FullMethodName      = "/api.gateway.v1.Wechat/CheckHost"
)

// WechatClient is the client API for Wechat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatClient interface {
	SystemInfo(ctx context.Context, in *SystemInfoReq, opts ...grpc.CallOption) (*SystemInfoResp, error)
	JsCode2Session(ctx context.Context, in *JsCode2SessionReq, opts ...grpc.CallOption) (*JsCode2SessionReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error)
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error)
	CheckHost(ctx context.Context, in *CheckHostReq, opts ...grpc.CallOption) (*CheckHostReq, error)
}

type wechatClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatClient(cc grpc.ClientConnInterface) WechatClient {
	return &wechatClient{cc}
}

func (c *wechatClient) SystemInfo(ctx context.Context, in *SystemInfoReq, opts ...grpc.CallOption) (*SystemInfoResp, error) {
	out := new(SystemInfoResp)
	err := c.cc.Invoke(ctx, Wechat_SystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatClient) JsCode2Session(ctx context.Context, in *JsCode2SessionReq, opts ...grpc.CallOption) (*JsCode2SessionReply, error) {
	out := new(JsCode2SessionReply)
	err := c.cc.Invoke(ctx, Wechat_JsCode2Session_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, Wechat_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, Wechat_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatClient) CheckHost(ctx context.Context, in *CheckHostReq, opts ...grpc.CallOption) (*CheckHostReq, error) {
	out := new(CheckHostReq)
	err := c.cc.Invoke(ctx, Wechat_CheckHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatServer is the server API for Wechat service.
// All implementations must embed UnimplementedWechatServer
// for forward compatibility
type WechatServer interface {
	SystemInfo(context.Context, *SystemInfoReq) (*SystemInfoResp, error)
	JsCode2Session(context.Context, *JsCode2SessionReq) (*JsCode2SessionReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	UserInfo(context.Context, *UserInfoReq) (*UserInfoReply, error)
	CheckHost(context.Context, *CheckHostReq) (*CheckHostReq, error)
	mustEmbedUnimplementedWechatServer()
}

// UnimplementedWechatServer must be embedded to have forward compatible implementations.
type UnimplementedWechatServer struct {
}

func (UnimplementedWechatServer) SystemInfo(context.Context, *SystemInfoReq) (*SystemInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedWechatServer) JsCode2Session(context.Context, *JsCode2SessionReq) (*JsCode2SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsCode2Session not implemented")
}
func (UnimplementedWechatServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedWechatServer) UserInfo(context.Context, *UserInfoReq) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedWechatServer) CheckHost(context.Context, *CheckHostReq) (*CheckHostReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHost not implemented")
}
func (UnimplementedWechatServer) mustEmbedUnimplementedWechatServer() {}

// UnsafeWechatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatServer will
// result in compilation errors.
type UnsafeWechatServer interface {
	mustEmbedUnimplementedWechatServer()
}

func RegisterWechatServer(s grpc.ServiceRegistrar, srv WechatServer) {
	s.RegisterService(&Wechat_ServiceDesc, srv)
}

func _Wechat_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wechat_SystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServer).SystemInfo(ctx, req.(*SystemInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wechat_JsCode2Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsCode2SessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServer).JsCode2Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wechat_JsCode2Session_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServer).JsCode2Session(ctx, req.(*JsCode2SessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wechat_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wechat_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wechat_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wechat_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wechat_CheckHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatServer).CheckHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wechat_CheckHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatServer).CheckHost(ctx, req.(*CheckHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wechat_ServiceDesc is the grpc.ServiceDesc for Wechat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wechat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Wechat",
	HandlerType: (*WechatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemInfo",
			Handler:    _Wechat_SystemInfo_Handler,
		},
		{
			MethodName: "JsCode2Session",
			Handler:    _Wechat_JsCode2Session_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Wechat_UpdateUser_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Wechat_UserInfo_Handler,
		},
		{
			MethodName: "CheckHost",
			Handler:    _Wechat_CheckHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/v1/wechat.proto",
}
