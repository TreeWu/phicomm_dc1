// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/v1/device.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeviceConnectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceConnectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceConnectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceConnectReqMultiError, or nil if none found.
func (m *DeviceConnectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceConnectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mac

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeviceConnectReqMultiError(errors)
	}

	return nil
}

// DeviceConnectReqMultiError is an error wrapping multiple validation errors
// returned by DeviceConnectReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceConnectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceConnectReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceConnectReqMultiError) AllErrors() []error { return m }

// DeviceConnectReqValidationError is the validation error returned by
// DeviceConnectReq.Validate if the designated constraints aren't met.
type DeviceConnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceConnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceConnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceConnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceConnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceConnectReqValidationError) ErrorName() string { return "DeviceConnectReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceConnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceConnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceConnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceConnectReqValidationError{}

// Validate checks the field values on DeviceConnectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceConnectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceConnectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceConnectReplyMultiError, or nil if none found.
func (m *DeviceConnectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceConnectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return DeviceConnectReplyMultiError(errors)
	}

	return nil
}

// DeviceConnectReplyMultiError is an error wrapping multiple validation errors
// returned by DeviceConnectReply.ValidateAll() if the designated constraints
// aren't met.
type DeviceConnectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceConnectReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceConnectReplyMultiError) AllErrors() []error { return m }

// DeviceConnectReplyValidationError is the validation error returned by
// DeviceConnectReply.Validate if the designated constraints aren't met.
type DeviceConnectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceConnectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceConnectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceConnectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceConnectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceConnectReplyValidationError) ErrorName() string {
	return "DeviceConnectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceConnectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceConnectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceConnectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceConnectReplyValidationError{}

// Validate checks the field values on Dc1Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dc1Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dc1Device with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Dc1DeviceMultiError, or nil
// if none found.
func (m *Dc1Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Dc1Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeviceId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for DeviceType

	// no validation rules for IsOnline

	// no validation rules for I

	// no validation rules for V

	// no validation rules for P

	// no validation rules for DetalKwh

	// no validation rules for Recover

	// no validation rules for Switch1Name

	// no validation rules for Switch2Name

	// no validation rules for Switch3Name

	// no validation rules for LastActivatedAt

	// no validation rules for LastMessageAt

	if all {
		switch v := interface{}(m.GetCommand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Dc1DeviceValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Dc1DeviceValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Dc1DeviceValidationError{
				field:  "Command",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Dc1DeviceMultiError(errors)
	}

	return nil
}

// Dc1DeviceMultiError is an error wrapping multiple validation errors returned
// by Dc1Device.ValidateAll() if the designated constraints aren't met.
type Dc1DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Dc1DeviceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Dc1DeviceMultiError) AllErrors() []error { return m }

// Dc1DeviceValidationError is the validation error returned by
// Dc1Device.Validate if the designated constraints aren't met.
type Dc1DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dc1DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dc1DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dc1DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dc1DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dc1DeviceValidationError) ErrorName() string { return "Dc1DeviceValidationError" }

// Error satisfies the builtin error interface
func (e Dc1DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDc1Device.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dc1DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dc1DeviceValidationError{}

// Validate checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceRequestMultiError, or nil if none found.
func (m *UpdateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.DeviceId != nil {

		if utf8.RuneCountInString(m.GetDeviceId()) < 5 {
			err := UpdateDeviceRequestValidationError{
				field:  "DeviceId",
				reason: "value length must be at least 5 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Switch1Name != nil {
		// no validation rules for Switch1Name
	}

	if m.Switch2Name != nil {
		// no validation rules for Switch2Name
	}

	if m.Switch3Name != nil {
		// no validation rules for Switch3Name
	}

	if m.Recover != nil {
		// no validation rules for Recover
	}

	if len(errors) > 0 {
		return UpdateDeviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceRequestMultiError) AllErrors() []error { return m }

// UpdateDeviceRequestValidationError is the validation error returned by
// UpdateDeviceRequest.Validate if the designated constraints aren't met.
type UpdateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceRequestValidationError) ErrorName() string {
	return "UpdateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceRequestValidationError{}

// Validate checks the field values on UpdateDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceReplyMultiError, or nil if none found.
func (m *UpdateDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeviceReplyMultiError(errors)
	}

	return nil
}

// UpdateDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceReplyMultiError) AllErrors() []error { return m }

// UpdateDeviceReplyValidationError is the validation error returned by
// UpdateDeviceReply.Validate if the designated constraints aren't met.
type UpdateDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceReplyValidationError) ErrorName() string {
	return "UpdateDeviceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceReplyValidationError{}

// Validate checks the field values on ListDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceRequestMultiError, or nil if none found.
func (m *ListDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListDeviceRequestMultiError(errors)
	}

	return nil
}

// ListDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by ListDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceRequestMultiError) AllErrors() []error { return m }

// ListDeviceRequestValidationError is the validation error returned by
// ListDeviceRequest.Validate if the designated constraints aren't met.
type ListDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceRequestValidationError) ErrorName() string {
	return "ListDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceRequestValidationError{}

// Validate checks the field values on ListDeviceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceReplyMultiError, or nil if none found.
func (m *ListDeviceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeviceReplyValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeviceReplyValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeviceReplyValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeviceReplyMultiError(errors)
	}

	return nil
}

// ListDeviceReplyMultiError is an error wrapping multiple validation errors
// returned by ListDeviceReply.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceReplyMultiError) AllErrors() []error { return m }

// ListDeviceReplyValidationError is the validation error returned by
// ListDeviceReply.Validate if the designated constraints aren't met.
type ListDeviceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceReplyValidationError) ErrorName() string { return "ListDeviceReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDeviceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceReplyValidationError{}
