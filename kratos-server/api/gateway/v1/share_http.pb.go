// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.21.9
// source: api/gateway/v1/share.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShareGetShareList = "/api.gateway.v1.Share/GetShareList"
const OperationShareShareConfirm = "/api.gateway.v1.Share/ShareConfirm"
const OperationShareShareExit = "/api.gateway.v1.Share/ShareExit"
const OperationShareShareInvite = "/api.gateway.v1.Share/ShareInvite"
const OperationShareShareRevoke = "/api.gateway.v1.Share/ShareRevoke"

type ShareHTTPServer interface {
	GetShareList(context.Context, *GetShareListReq) (*GetShareListReply, error)
	// ShareConfirm 设备分享确认
	ShareConfirm(context.Context, *ShareConfirmReq) (*ShareConfirmReply, error)
	// ShareExit 主动退出分享
	ShareExit(context.Context, *ShareExitReq) (*ShareExitReply, error)
	// ShareInvite 设备分享邀请
	ShareInvite(context.Context, *ShareInviteReq) (*ShareInviteReply, error)
	// ShareRevoke 撤销邀请
	ShareRevoke(context.Context, *ShareRevokeReq) (*ShareRevokeReply, error)
}

func RegisterShareHTTPServer(s *http.Server, srv ShareHTTPServer) {
	r := s.Route("/")
	r.POST("v1/share/invite", _Share_ShareInvite0_HTTP_Handler(srv))
	r.POST("v1/share/confirm", _Share_ShareConfirm0_HTTP_Handler(srv))
	r.POST("v1/share/revoke", _Share_ShareRevoke0_HTTP_Handler(srv))
	r.POST("v1/share/exit", _Share_ShareExit0_HTTP_Handler(srv))
	r.GET("v1/share/list", _Share_GetShareList0_HTTP_Handler(srv))
}

func _Share_ShareInvite0_HTTP_Handler(srv ShareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShareInviteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShareShareInvite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShareInvite(ctx, req.(*ShareInviteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShareInviteReply)
		return ctx.Result(200, reply)
	}
}

func _Share_ShareConfirm0_HTTP_Handler(srv ShareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShareConfirmReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShareShareConfirm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShareConfirm(ctx, req.(*ShareConfirmReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShareConfirmReply)
		return ctx.Result(200, reply)
	}
}

func _Share_ShareRevoke0_HTTP_Handler(srv ShareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShareRevokeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShareShareRevoke)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShareRevoke(ctx, req.(*ShareRevokeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShareRevokeReply)
		return ctx.Result(200, reply)
	}
}

func _Share_ShareExit0_HTTP_Handler(srv ShareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShareExitReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShareShareExit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShareExit(ctx, req.(*ShareExitReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShareExitReply)
		return ctx.Result(200, reply)
	}
}

func _Share_GetShareList0_HTTP_Handler(srv ShareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShareListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShareGetShareList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShareList(ctx, req.(*GetShareListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShareListReply)
		return ctx.Result(200, reply)
	}
}

type ShareHTTPClient interface {
	GetShareList(ctx context.Context, req *GetShareListReq, opts ...http.CallOption) (rsp *GetShareListReply, err error)
	ShareConfirm(ctx context.Context, req *ShareConfirmReq, opts ...http.CallOption) (rsp *ShareConfirmReply, err error)
	ShareExit(ctx context.Context, req *ShareExitReq, opts ...http.CallOption) (rsp *ShareExitReply, err error)
	ShareInvite(ctx context.Context, req *ShareInviteReq, opts ...http.CallOption) (rsp *ShareInviteReply, err error)
	ShareRevoke(ctx context.Context, req *ShareRevokeReq, opts ...http.CallOption) (rsp *ShareRevokeReply, err error)
}

type ShareHTTPClientImpl struct {
	cc *http.Client
}

func NewShareHTTPClient(client *http.Client) ShareHTTPClient {
	return &ShareHTTPClientImpl{client}
}

func (c *ShareHTTPClientImpl) GetShareList(ctx context.Context, in *GetShareListReq, opts ...http.CallOption) (*GetShareListReply, error) {
	var out GetShareListReply
	pattern := "v1/share/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShareGetShareList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShareHTTPClientImpl) ShareConfirm(ctx context.Context, in *ShareConfirmReq, opts ...http.CallOption) (*ShareConfirmReply, error) {
	var out ShareConfirmReply
	pattern := "v1/share/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShareShareConfirm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShareHTTPClientImpl) ShareExit(ctx context.Context, in *ShareExitReq, opts ...http.CallOption) (*ShareExitReply, error) {
	var out ShareExitReply
	pattern := "v1/share/exit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShareShareExit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShareHTTPClientImpl) ShareInvite(ctx context.Context, in *ShareInviteReq, opts ...http.CallOption) (*ShareInviteReply, error) {
	var out ShareInviteReply
	pattern := "v1/share/invite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShareShareInvite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShareHTTPClientImpl) ShareRevoke(ctx context.Context, in *ShareRevokeReq, opts ...http.CallOption) (*ShareRevokeReply, error) {
	var out ShareRevokeReply
	pattern := "v1/share/revoke"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShareShareRevoke))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
