// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/gateway/v1/share.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Share_ShareInvite_FullMethodName  = "/api.gateway.v1.Share/ShareInvite"
	Share_ShareConfirm_FullMethodName = "/api.gateway.v1.Share/ShareConfirm"
	Share_ShareRevoke_FullMethodName  = "/api.gateway.v1.Share/ShareRevoke"
	Share_ShareExit_FullMethodName    = "/api.gateway.v1.Share/ShareExit"
	Share_GetShareList_FullMethodName = "/api.gateway.v1.Share/GetShareList"
)

// ShareClient is the client API for Share service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareClient interface {
	// 设备分享邀请
	ShareInvite(ctx context.Context, in *ShareInviteReq, opts ...grpc.CallOption) (*ShareInviteReply, error)
	// 设备分享确认
	ShareConfirm(ctx context.Context, in *ShareConfirmReq, opts ...grpc.CallOption) (*ShareConfirmReply, error)
	// 撤销邀请
	ShareRevoke(ctx context.Context, in *ShareRevokeReq, opts ...grpc.CallOption) (*ShareRevokeReply, error)
	// 主动退出分享
	ShareExit(ctx context.Context, in *ShareExitReq, opts ...grpc.CallOption) (*ShareExitReply, error)
	GetShareList(ctx context.Context, in *GetShareListReq, opts ...grpc.CallOption) (*GetShareListReply, error)
}

type shareClient struct {
	cc grpc.ClientConnInterface
}

func NewShareClient(cc grpc.ClientConnInterface) ShareClient {
	return &shareClient{cc}
}

func (c *shareClient) ShareInvite(ctx context.Context, in *ShareInviteReq, opts ...grpc.CallOption) (*ShareInviteReply, error) {
	out := new(ShareInviteReply)
	err := c.cc.Invoke(ctx, Share_ShareInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareConfirm(ctx context.Context, in *ShareConfirmReq, opts ...grpc.CallOption) (*ShareConfirmReply, error) {
	out := new(ShareConfirmReply)
	err := c.cc.Invoke(ctx, Share_ShareConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareRevoke(ctx context.Context, in *ShareRevokeReq, opts ...grpc.CallOption) (*ShareRevokeReply, error) {
	out := new(ShareRevokeReply)
	err := c.cc.Invoke(ctx, Share_ShareRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) ShareExit(ctx context.Context, in *ShareExitReq, opts ...grpc.CallOption) (*ShareExitReply, error) {
	out := new(ShareExitReply)
	err := c.cc.Invoke(ctx, Share_ShareExit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareClient) GetShareList(ctx context.Context, in *GetShareListReq, opts ...grpc.CallOption) (*GetShareListReply, error) {
	out := new(GetShareListReply)
	err := c.cc.Invoke(ctx, Share_GetShareList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServer is the server API for Share service.
// All implementations must embed UnimplementedShareServer
// for forward compatibility
type ShareServer interface {
	// 设备分享邀请
	ShareInvite(context.Context, *ShareInviteReq) (*ShareInviteReply, error)
	// 设备分享确认
	ShareConfirm(context.Context, *ShareConfirmReq) (*ShareConfirmReply, error)
	// 撤销邀请
	ShareRevoke(context.Context, *ShareRevokeReq) (*ShareRevokeReply, error)
	// 主动退出分享
	ShareExit(context.Context, *ShareExitReq) (*ShareExitReply, error)
	GetShareList(context.Context, *GetShareListReq) (*GetShareListReply, error)
	mustEmbedUnimplementedShareServer()
}

// UnimplementedShareServer must be embedded to have forward compatible implementations.
type UnimplementedShareServer struct {
}

func (UnimplementedShareServer) ShareInvite(context.Context, *ShareInviteReq) (*ShareInviteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareInvite not implemented")
}
func (UnimplementedShareServer) ShareConfirm(context.Context, *ShareConfirmReq) (*ShareConfirmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareConfirm not implemented")
}
func (UnimplementedShareServer) ShareRevoke(context.Context, *ShareRevokeReq) (*ShareRevokeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareRevoke not implemented")
}
func (UnimplementedShareServer) ShareExit(context.Context, *ShareExitReq) (*ShareExitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareExit not implemented")
}
func (UnimplementedShareServer) GetShareList(context.Context, *GetShareListReq) (*GetShareListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareList not implemented")
}
func (UnimplementedShareServer) mustEmbedUnimplementedShareServer() {}

// UnsafeShareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareServer will
// result in compilation errors.
type UnsafeShareServer interface {
	mustEmbedUnimplementedShareServer()
}

func RegisterShareServer(s grpc.ServiceRegistrar, srv ShareServer) {
	s.RegisterService(&Share_ServiceDesc, srv)
}

func _Share_ShareInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Share_ShareInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareInvite(ctx, req.(*ShareInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Share_ShareConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareConfirm(ctx, req.(*ShareConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Share_ShareRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareRevoke(ctx, req.(*ShareRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_ShareExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).ShareExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Share_ShareExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).ShareExit(ctx, req.(*ShareExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Share_GetShareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServer).GetShareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Share_GetShareList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServer).GetShareList(ctx, req.(*GetShareListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Share_ServiceDesc is the grpc.ServiceDesc for Share service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Share_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Share",
	HandlerType: (*ShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareInvite",
			Handler:    _Share_ShareInvite_Handler,
		},
		{
			MethodName: "ShareConfirm",
			Handler:    _Share_ShareConfirm_Handler,
		},
		{
			MethodName: "ShareRevoke",
			Handler:    _Share_ShareRevoke_Handler,
		},
		{
			MethodName: "ShareExit",
			Handler:    _Share_ShareExit_Handler,
		},
		{
			MethodName: "GetShareList",
			Handler:    _Share_GetShareList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/v1/share.proto",
}
