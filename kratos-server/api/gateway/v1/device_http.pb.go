// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.2
// source: api/gateway/v1/device.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeviceBindDevice = "/api.gateway.v1.Device/BindDevice"
const OperationDeviceListDevice = "/api.gateway.v1.Device/ListDevice"
const OperationDeviceUpdateDevice = "/api.gateway.v1.Device/UpdateDevice"

type DeviceHTTPServer interface {
	// BindDevice 绑定设备
	BindDevice(context.Context, *DeviceConnectReq) (*DeviceConnectReply, error)
	// ListDevice 获取设备列表
	ListDevice(context.Context, *ListDeviceRequest) (*ListDeviceReply, error)
	// UpdateDevice 更新设备信息
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceReply, error)
}

func RegisterDeviceHTTPServer(s *http.Server, srv DeviceHTTPServer) {
	r := s.Route("/")
	r.POST("v1/device", _Device_UpdateDevice0_HTTP_Handler(srv))
	r.GET("/v1/device", _Device_ListDevice0_HTTP_Handler(srv))
	r.POST("/v1/device/binding", _Device_BindDevice0_HTTP_Handler(srv))
}

func _Device_UpdateDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeviceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceUpdateDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDevice(ctx, req.(*UpdateDeviceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeviceReply)
		return ctx.Result(200, reply)
	}
}

func _Device_ListDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeviceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceListDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDevice(ctx, req.(*ListDeviceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeviceReply)
		return ctx.Result(200, reply)
	}
}

func _Device_BindDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceConnectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceBindDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindDevice(ctx, req.(*DeviceConnectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceConnectReply)
		return ctx.Result(200, reply)
	}
}

type DeviceHTTPClient interface {
	BindDevice(ctx context.Context, req *DeviceConnectReq, opts ...http.CallOption) (rsp *DeviceConnectReply, err error)
	ListDevice(ctx context.Context, req *ListDeviceRequest, opts ...http.CallOption) (rsp *ListDeviceReply, err error)
	UpdateDevice(ctx context.Context, req *UpdateDeviceRequest, opts ...http.CallOption) (rsp *UpdateDeviceReply, err error)
}

type DeviceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeviceHTTPClient(client *http.Client) DeviceHTTPClient {
	return &DeviceHTTPClientImpl{client}
}

func (c *DeviceHTTPClientImpl) BindDevice(ctx context.Context, in *DeviceConnectReq, opts ...http.CallOption) (*DeviceConnectReply, error) {
	var out DeviceConnectReply
	pattern := "/v1/device/binding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceBindDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) ListDevice(ctx context.Context, in *ListDeviceRequest, opts ...http.CallOption) (*ListDeviceReply, error) {
	var out ListDeviceReply
	pattern := "/v1/device"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceListDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...http.CallOption) (*UpdateDeviceReply, error) {
	var out UpdateDeviceReply
	pattern := "v1/device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceUpdateDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
