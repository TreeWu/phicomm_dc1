// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	data2 "github.com/treewu/phicomm_dc1/app/common/data"
	"github.com/treewu/phicomm_dc1/app/dc1server/internal/biz"
	"github.com/treewu/phicomm_dc1/app/dc1server/internal/conf"
	"github.com/treewu/phicomm_dc1/app/dc1server/internal/data"
	"github.com/treewu/phicomm_dc1/app/dc1server/internal/server"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewDatabase(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := data.NewRedis(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	deviceDao := data2.NewDeviceDao(db, client, logger)
	consumers := data.NewConsumers(client, logger)
	userDeviceDao := data2.NewUserDeviceDao(db, logger)
	dc1Biz := biz.NewDc1Biz(deviceDao, logger, consumers, confServer, userDeviceDao)
	dc1serverServer := server.NewDc1Server(confServer, logger, dc1Biz)
	httpServer := server.NewHTTPServer()
	app := newApp(logger, dc1serverServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
