// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	data2 "github.com/treewu/phicomm_dc1/app/common/data"
	"github.com/treewu/phicomm_dc1/app/gateway/internal/biz"
	"github.com/treewu/phicomm_dc1/app/gateway/internal/conf"
	"github.com/treewu/phicomm_dc1/app/gateway/internal/data"
	"github.com/treewu/phicomm_dc1/app/gateway/internal/server"
	"github.com/treewu/phicomm_dc1/app/gateway/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewDatabase(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := data.NewRedis(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dataData := data.NewData(db, client)
	asyncSender := data.NewAsyncSender(dataData, logger)
	commandLogRepo := data.NewCommandLogRepo(dataData, logger)
	commandBiz := biz.NewCommandBiz(asyncSender, commandLogRepo, logger)
	commandServiceService := service.NewCommandServiceService(commandBiz)
	grpcServer := server.NewGRPCServer(confServer, commandServiceService, logger)
	deviceDao := data2.NewDeviceDao(db, client, logger)
	wechatUserRepo := data.NewWechatUserRepo(dataData)
	userDeviceDao := data2.NewUserDeviceDao(db, logger)
	commonBiz := biz.NewCommonBiz(wechatUserRepo)
	deviceBiz := biz.NewDeviceBiz(logger, deviceDao, wechatUserRepo, userDeviceDao, commonBiz, confData)
	deviceService := service.NewDeviceService(deviceBiz)
	wechatBiz := biz.NewWechatBiz(confData, logger, wechatUserRepo)
	wechatService := service.NewWechatService(wechatBiz)
	planRepo := data.NewPlanRepo(dataData)
	taskService, cleanup3 := biz.NewTaskService(asyncSender, planRepo, commandLogRepo, logger)
	planBiz := biz.NewPlanBiz(planRepo, logger, taskService, commonBiz)
	planService := service.NewPlanService(planBiz)
	shareService := service.NewShareService(deviceBiz)
	httpServer := server.NewHTTPServer(confServer, confData, commandServiceService, deviceService, wechatService, planService, shareService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
